@page "/led"
@using garagedoor.Shared
@using System.Net.Http.Headers
@inject HttpClient Http
@inject AuthenticationStateProviders.TokenAuthenticationStateProvider TokenProvider
@attribute [Authorize]

<div class="container">
  <div class="row">
    <div class="col-lg-12" style="background-color:white;">
      <h1 class="text-center">Door Actions</h1>
    </div>
  </div>
  <div class="row">
    <div class="col-lg-6 text-center" style="background-color:white;">
      <button class="btn btn-primary" @onclick="ToggleLed">Toggle Door</button>
    </div>
    <div class="col-lg-6 text-center" style="background-color:white;">
      <button class="btn btn-primary" @onclick="RefreshImage">Check state</button>
    </div>
  </div>
  <div class="row">
    <div class="col-lg-12 text-center" >
      <img class="img-rounded" src=@doorImage alt="GarageDoorStatus" height="320" width="240" style="margin:10px 10px">
    </div>
  </div>
</div>


@code {
    bool toggle = false;
    String doorImage= "images/29-Dec-19%2019-03-04.jpg";

    async Task ToggleLed()
    {
        var token = await TokenProvider.GetTokenAsync();
        if (token != null)
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            toggle = !toggle;
            await Http.SendJsonAsync(HttpMethod.Post, "LED", toggle);
        }
    }

    async Task RefreshImage()
    {
        bool refresh = true;
        var token = await TokenProvider.GetTokenAsync();
        if (token != null)
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            //await Http.SendJsonAsync(HttpMethod.Post, "IMAGE", refresh);
            var result = await Http.PostJsonAsync<ImageDetails>("IMAGE", refresh);
            // var response = await Http.SendJsonAsync <HttpResponseMessage>(HttpMethod.Post, "IMAGE", refresh);
            //System.Console.WriteLine(response);
            doorImage=result.Name;
        }
    }
}

